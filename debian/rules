#! /usr/bin/make -f
# -*- makefile -*-

# architecture dependent variables
ARCH			:= $(shell dpkg --print-gnu-build-architecture)
DEB_HOST_ARCH		:= $(shell dpkg-architecture -qDEB_HOST_ARCH)
DEB_HOST_GNU_CPU	:= $(shell dpkg-architecture -qDEB_HOST_GNU_CPU)
DEB_HOST_GNU_SYSTEM	:= $(shell dpkg-architecture -qDEB_HOST_GNU_SYSTEM)
DEB_HOST_GNU_TYPE	:= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)

CCLIBC1	= $(ARCH)-linuxlibc1-gcc
STRIP	= strip
SHELL	= bash
IX	= install -o 0 -g 0
ID	= install -o 0 -g 0 -m 644

# build a statically linked bash?
with_static = yes

# built with installed libreadline4 and do not build readline packages?
#with_installed_rl = yes
with_installed_rl = no

#ifneq ($(with_installed_rl),yes)
#  BINARY_ARCH_TARGETS	+= binary-rl binary-rld binary-rlg
#  BUILD_TARGETS		+= build-rl-stamp
#endif

#ifeq ($(filter $(ARCH),i486 m68k),$(ARCH))
#  BINARY_ARCH_TARGETS += binary-rl-libc5 binary-rld-libc5
#  BINARY_BUILD_TARGETS = build-libc5
#endif

debflags =
#ifeq ($(with_installed_rl),yes)
#  debflags = \
#	READLINE_LDFLAGS= \
#	HISTORY_LDFLAGS=
#endif
#ifeq ($(with_static),yes)
#  debflags = \
#	READLINE_LIBRARY=$(builddir)/lib/readline/static/libreadline.a \
#	READLINE_LDFLAGS="-L$(builddir)/lib/readline/static" \
#	READLINE_LIB="-Wl,-Bstatic -lreadline -Wl,-Bdynamic" \
#	HISTORY_LIBRARY=$(builddir)/lib/readline/static/libhistory.a \
#	HISTORY_LDFLAGS="-L$(builddir)/lib/readline/static" \
#	HISTORY_LIB="-Wl,-Bstatic -lhistory -Wl,-Bdynamic"
#endif
ifeq ($(with_static),yes)
  debflags = \
	READLINE_LIBRARY=$(builddir)/lib/readline/static/libreadline.a \
	READLINE_LDFLAGS="-L$(builddir)/lib/readline/static" \
	READLINE_LIB="-Wl,-Bstatic -lreadline -Wl,-Bdynamic" \
	HISTORY_LIBRARY=$(builddir)/lib/readline/static/libhistory.a \
	HISTORY_LDFLAGS="-L$(builddir)/lib/readline/static" \
	HISTORY_LIB="-Wl,-Bstatic -lhistory -Wl,-Bdynamic"
endif

PWD	:= $(shell pwd)
p	= bash
p_bins	= bash-builtins
p_doc	= bash-doc

d	= debian/tmp
#d_bash	= debian/tmp
d_bins	= debian/tmp-b
d_doc	= debian/tmp-doc

srcdir		= $(PWD)
builddir	= $(PWD)/build

default: build

configure: configure-stamp
configure-stamp: patch-stamp
	$(checkdir)
	rm -rf $(builddir)
	mkdir $(builddir)
ifeq ($(with_installed_rl),yes)
	cd $(builddir) && $(srcdir)/configure --host=$(DEB_HOST_GNU_TYPE) \
		--with-curses --with-installed-readline --prefix=/usr
else
	cd $(builddir) && $(srcdir)/configure --host=$(DEB_HOST_GNU_TYPE) \
		--with-curses --prefix=/usr
endif
	touch configure-stamp

build: build-stamp
build-stamp: configure-stamp
	$(checkdir)
	$(MAKE) -C $(builddir) SOVERSION=$(soversion) \
		CFLAGS='-g -O2' \
		deb_builddir=$(builddir)/ $(debflags)
	cd debian; $(CC) -O2 -s -o bash.preinst bash.preinst.c
	touch build-stamp

clean:
	$(checkdir)
	rm -f configure*-stamp build*-stamp
	rm -rf $(builddir) $(builddir_libc5)
	rm -rf $(d) $(d_doc) $(d_bins) \
		$(d_rl) $(d_rld) $(d_rlg) $(d_rl5) $(d_rl5d)
	rm -f debian/{bash.preinst,rl.postinst}
	$(MAKE) -f debian/rules unpatch
	rm -rf debian/{files*,substvars,rl-libc[56].postinst}
	find . \( -name '*~' -o -name '*.rej' -o -name '*.orig' \) \
		-print0 | xargs -0 rm -f

install: checkroot install-stamp
install-stamp: build-stamp
	$(checkdir)
	rm -rf $(d)
	rm -rf $(d) $(d_doc) $(d_bins) \
		$(d_rl) $(d_rld) $(d_rlg) $(d_rl5) $(d_rl5d)
	mkdir -p $(d)/{bin,usr}
	$(MAKE) -C $(builddir) install \
		prefix=$(PWD)/$(d)/usr \
		mandir=$(PWD)/$(d)/usr/share/man \
		infodir=$(PWD)/$(d)/usr/share/info \
		$(debflags)
	mv $(d)/usr/bin/bash $(d)/bin/.
	mkdir -p $(d_doc)/usr/share/info
	mv $(d)/usr/share/info/bash.info $(d_doc)/usr/share/info/.
	touch install-stamp

binary-indep: checkroot build install
	$(IX) -d $(d_doc)/DEBIAN \
		$(d_doc)/usr/share/doc/{$(p_doc),$(p)/examples/loadables}
	$(ID) CWRU/changelog $(d_doc)/usr/share/doc/$(p)
	find examples -type d \
		| xargs -i $(IX) -d '$(d_doc)/usr/share/doc/$(p)/{}'
	find examples -type f \
		| xargs -i $(ID) '{}' '$(d_doc)/usr/share/doc/$(p)/{}'
	rm -rf $(d_doc)/usr/share/doc/$(p)/examples/loadables
	ln -sf ../$(p)/examples $(d_doc)/usr/share/doc/$(p_doc)/examples
	$(ID) debian/changelog $(d_doc)/usr/share/doc/$(p_doc)/changelog.Debian
	find $(d_doc)/usr/share/{info,doc} ! -name '*.gz' -type f \
		| xargs gzip -9f
	ln -sf ../$(p)/changelog.gz \
		$(d_doc)/usr/share/doc/$(p_doc)/changelog.gz
	$(ID) debian/bash.copyright $(d_doc)/usr/share/doc/$(p_doc)/copyright
	$(IX) debian/bash-doc.postinst $(d_doc)/DEBIAN/postinst
	$(IX) debian/bash-doc.prerm $(d_doc)/DEBIAN/prerm
	dpkg-gencontrol -isp -p$(p_doc) -P$(d_doc)
	dpkg --build $(d_doc) ..

binary-arch: binary-bash binary-b

binary-bash: checkroot build install
	$(checkdir)
#	rm -rf $(d)
	$(IX) -d $(d)/DEBIAN $(d)/{etc/skel,usr/share/doc/$(p)}
	ln -sf bash $(d)/bin/rbash
	$(STRIP) --strip-unneeded $(d)/bin/bash
	ln -sf bash $(d)/bin/sh
	ln -sf bash.1.gz $(d)/usr/share/man/man1/sh.1.gz
#	$(ID) debian/etc.profile $(d)/etc/profile
	$(ID) debian/etc.bash.bashrc $(d)/etc/bash.bashrc
	$(ID) debian/skel.bashrc $(d)/etc/skel/.bashrc
	$(ID) debian/skel.bash_profile $(d)/etc/skel/.bash_profile
	$(ID) debian/skel.bash_logout $(d)/etc/skel/.bash_logout
	$(ID) NEWS COMPAT CHANGES doc/{FAQ,INTRO} CWRU/POSIX.NOTES \
		$(d)/usr/share/doc/$(p)
	$(ID) debian/README.Debian $(d)/usr/share/doc/bash/.
	$(ID) doc/{builtins.1,rbash.1} $(d)/usr/share/man/man1
	$(ID) debian/changelog $(d)/usr/share/doc/$(p)/changelog.Debian
	find $(d)/usr/share/{doc,man} ! -name '*.gz' -type f | xargs gzip -9f
	$(ID) debian/bash.copyright $(d)/usr/share/doc/$(p)/copyright
	$(IX) debian/bash.preinst $(d)/DEBIAN/preinst
	$(IX) debian/bash.postinst $(d)/DEBIAN/postinst
	$(IX) debian/bash.prerm $(d)/DEBIAN/prerm
	$(ID) debian/bash.conffiles $(d)/DEBIAN/conffiles
	dpkg-shlibdeps -dPre-Depends $(d)/bin/bash debian/bash.preinst
	dpkg-gencontrol -isp -p$(p)
	dpkg --build $(d) ..

# Even though it contains only headers and example files,
# bash-builtins is NOT arch-independent because the config.h* files
# differ on different archs.
binary-b: checkroot build install
	$(checkdir)
	rm -rf $(d_bins)
	$(IX) -d $(d_bins)/{DEBIAN,usr/share/doc/$(p)/examples/loadables} \
		$(d_bins)/{usr/{include/bash/{builtins,lib/{glob,tilde}}}}
	$(ID) *.h config-top.h config-bot.h $(d_bins)/usr/include/bash/
	$(ID) builtins/*.h $(d_bins)/usr/include/bash/builtins/
	$(ID) lib/glob/*.h $(d_bins)/usr/include/bash/lib/glob/
	$(ID) lib/tilde/*.h $(d_bins)/usr/include/bash/lib/tilde/
	$(ID) examples/loadables/{README,*.c} \
		$(d_bins)/usr/share/doc/$(p)/examples/loadables
	$(ID) $(builddir)/examples/loadables/Makefile \
		$(d_bins)/usr/share/doc/$(p)/examples/loadables
	ln -sf bash $(d_bins)/usr/share/doc/$(p_bins)
	find $(d_bins)/usr/share/doc ! -name '*.gz' -type f | xargs gzip -9f
	$(IX) debian/bins.postinst $(d_bins)/DEBIAN/postinst
	$(IX) debian/bins.prerm $(d_bins)/DEBIAN/prerm
	dpkg-gencontrol -isp -p$(p_bins) -P$(d_bins)
	dpkg --build $(d_bins) ..


define checkdir
	test -f bashline.c -a -f debian/rules
endef


binary:		binary-indep binary-arch

source diff:
	@echo >&2 'source and diff are obsolete - use dpkg-source -b'; false

checkroot:
	$(checkdir)
	test root = "`whoami`"


# rules to patch the unpacked files in the source directory
# ---------------------------------------------------------------------------
# various rules to unpack addons and (un)apply patches.
# 	- patch / apply-patches
#	- unpatch / reverse-patches

patchdir	= debian/patches

# which patches should be applied?
debian_patches = \
	builtin-echo \
	bashbug-editor \
	conf-update \
	deb-build \
	deb-defpath \
	dont-report-sigpipe \
	examples \
	jobs-segfault \
	mailcheck \
	manpages \
	man-vx-opts \
	privmode \
	random \
	system-bashrc \
	tempnam \
	various \
	rl-inputrc \
	rl-ctrl-char \
	rl-deb-build \
	rl-examples \
	rl-del-backspace-policy \
	rl-paren-matching \
	rl-shell-unknown-bug \
	secure-build \
	job-control-segfault

#	privmode # see comment from upstream author in patch
# 	applied-upstream
#	rl-todo
#	todo

patch: patch-stamp
apply-patches: patch-stamp

patch-stamp: $(foreach p,$(debian_patches),patch-stamp-$(p))
	echo -e "\nPatches applied in this version:" > pxxx
	for i in $(debian_patches); do \
	  echo -e "\n$$i:" >> pxxx; \
	  sed -n 's/^# *DP: */  /p' $(patchdir)/$$i.dpatch >> pxxx; \
	done
	mv -f pxxx $@

reverse-patches: unpatch
unpatch:
	for stamp in none `ls -1t patch-stamp-* 2>/dev/null`; do \
	  case "$$stamp" in none|patched-stamp|patched-\*) continue; esac; \
	  patch=`echo $$stamp | sed -e 's,patch-stamp-,,'`; \
	  echo "trying to revert patch $$patch ..."; \
	  if [ -x $(patchdir)/$$patch.dpatch ]; then true; else \
	    chmod +x $(patchdir)/$$patch.dpatch; fi; \
	  if $(patchdir)/$$patch.dpatch -unpatch -d $(srcdir); then \
	    echo "reverted $$patch patch."; \
	    rm -f $$stamp; \
	  else \
	    echo "error in reverting $$patch patch."; \
	    exit 1; \
	  fi; \
	done
	rm -f patched-stamp

patch-stamp-%: $(patchdir)/%.dpatch
	if [ -x $< ]; then true; else chmod +x $<; fi
	if [ -f $@ ]; then \
	  echo "$* patches already applied."; exit 1; \
	fi
	$< -patch -d $(srcdir)
	echo "$* patches applied." > $@


.PHONY: binary binary-arch binary-indep clean checkroot

# Local Variables:
# mode: makefile
# end:
