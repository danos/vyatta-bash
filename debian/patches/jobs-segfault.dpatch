#! /bin/sh -e

if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch) patch $pdir -f --no-backup-if-mismatch -p1 < $0;;
    -unpatch) patch $pdir -f --no-backup-if-mismatch -R -p1 < $0;;
    *)
	echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
	exit 1
esac
exit 0

# DP: 

Date: Sat, 27 Mar 1999 10:37:31 +0100
From: =?iso-8859-1?Q?J=F6rgen_Tegn=E9r?= <teg@post.netlink.se>
To: submit@bugs.debian.org
Subject: Bash sometimes dumps core when 'jobs' is used
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 0.91.2

Package: bash
Version: 2.01.1-3.1

Invoking jobs with an incorrect jobspec makes bash dump core in the
function describe_pid() due to a segmentation fault (according to gdb).
It does not happen if there is no active backgrounded jobs.
There is no error message.

For example:
teg@burken /tmp # find / -name some_file_that_takes_time_to_find -print 2> /dev
/null &
teg@burken /tmp # jobs %25

After the jobs command and if there are not 25 active jobs, bash crashes and th
e login prompt is back. 25 is not a magic number, just an example.

--- ./builtins/common.c~	Wed Feb  4 20:56:31 1998
+++ ./builtins/common.c	Fri Mar 26 23:21:28 1999
@@ -462,6 +462,8 @@
   if (digit (*word) && all_digits (word))
     {
       job = atoi (word);
+      if (job >= job_slots)
+	return NO_JOB;
       return (job - 1);
     }
 
